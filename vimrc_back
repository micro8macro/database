call plug#begin('~/.vim/plugged')
Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }
Plug 'ludovicchabant/vim-gutentags'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
call plug#end()

execute pathogen#infect()
set tags+=~/.vim/tags/cpp_src/tags " 设置tags搜索路径
set tags+=tags
set wildmode=longest,list " Ex命令自动补全采用bash方式"
syntax on
filetype plugin indent on
set nu
highlight LineNr ctermfg=gray   "行号着色

map <C-n> :NERDTree<CR>

" pathongen
execute pathogen#infect()


" omnicppcomplete
set completeopt=longest,menu
let OmniCpp_NamespaceSearch = 2 " search namespaces in the current buffer and in included files
let OmniCpp_ShowPrototypeInAbbr = 1 " 显示函数参数列表
let OmniCpp_MayCompleteScope = 1 " 输入 :: 后自动补全
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]"]"

" pathogen
execute pathogen#infect()
syntax on
filetype plugin indent on

" NERDTree
map <C -n> :NERDTree<CR>

"minibufexpl.vim
let g:miniBufExplMaxSize = 2

" taglist
let Tlist_Show_One_File=1   "只展示一个文件的taglit
let Tlist_Exit_OnlyWindow=1 "当taglist是最后一个窗口时自动退出
let Tlist_Use_Right_Window=1 "在右边显示taglist窗口
let Tlist_Sort_Type="name"  "tag按名字排序

" OmniCppComplete
set completeopt=longest,menu
let OmniCpp_NamespaceSearch = 2
let OmniCpp_ShowPrototypeInAbbr = 1
let OmniCpp_MayCompleteScope = 1
let OmniCpp_DefaultNamespaces = ["std","_GLIBCXX_STD"]

"STL补全
set tags+=~/.vim/tags/cpp_src/tags

"符号自动补全
:inoremap ( ()<ESC>i

:inoremap ) <c-r>=ClosePair(')')<CR>

:inoremap { {<CR>}<ESC>O

:inoremap } <c-r>=ClosePair('}')<CR>

:inoremap [ []<ESC>i

:inoremap ] <c-r>=ClosePair(']')<CR>

:inoremap " ""<ESC>i

:inoremap ' ''<ESC>i

function! ClosePair(char)

    if getline('.')[col('.') - 1] == a:char

        return "\<Right>"

    else

        return a:char

    endif

endfunction

""gutentags配置
" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
let g:gutentags_project_root = ['.tags']
 
" 所生成的数据文件的名称 "
let g:gutentags_ctags_tagfile = '.tags'
 
" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
    let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
    let g:gutentags_modules += ['gtags_cscope']
endif
" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录 "
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
" 检测 ~/.cache/tags 不存在就新建 "
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif
" 配置 ctags 的参数，老的 Exuberant-ctags 不能有 --extra=+q，注意
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
 
" 如果使用 universal ctags 需要增加下面一行，老的 Exuberant-ctags 不能加下一行
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 0

"C, C++按F5编译运行
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
	exec "w"
        if &filetype == 'c'
        	exec "!g++ % -o %<"
                exec "!./%<"
        elseif &filetype == 'cpp'
        	exec "!g++ % -o %<"
                exec "!./%<"
        elseif &filetype == 'java' 
                exec "!javac %" 
                exec "!java %<"
        elseif &filetype == 'sh'
                :!./%
        elseif &filetype == 'py'
                exec "!python %"
                exec "!python %<"
        endif
endfunc

"C,C++的调试
map <F8> :call Rungdb()<CR>
        func! Rungdb()
                exec "w"
                exec "!g++ % -g -o %<"
                exec "!gdb ./%<"
endfunc

"cscope插件自动打开的配置
if has("cscope")
       set csprg=/usr/bin/cscope
       set csto=0
       set cst
       set nocsverb
       " add any database in current directory
       if filereadable("cscope.out")
       cs add cscope.out
       endif
       set csverb
endif
